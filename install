#!/usr/bin/env bash

# Colors and formatting
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'
RED='\033[0;31m'

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PACKAGES="entr tmux"
CONFIG_DIR="$HOME/.config"
TMUX_CONFIG_DIR="$CONFIG_DIR/tmux"
BACKUP_DIR="$CONFIG_DIR/.backup/tmux/$(date +%Y%m%d_%H%M%S)"

# Print formatted messages
print_step() {
    echo -e "${BLUE}==>${NC} ${BOLD}$1${NC}"
}

print_success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
    exit 1
}

# Check for required commands
check_dependencies() {
    print_step "Checking dependencies..."
    for cmd in git curl; do
        if ! command -v "$cmd" &> /dev/null; then
            print_error "$cmd is required but not installed"
        fi
    done
}

# Create required directories
setup_directories() {
    print_step "Setting up directories..."
    mkdir -p "$BACKUP_DIR" || print_error "Failed to create backup directory"
    print_success "Directories created"
}

# Install packages based on OS
install_packages() {
    print_step "Detecting operating system and installing packages..."
    OS=$(uname -s)
    case "$OS" in
        Darwin)
            print_step "macOS detected"
            if ! command -v brew >/dev/null 2>&1; then
                print_step "Installing Homebrew..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            brew install $PACKAGES || print_error "Failed to install packages via Homebrew"
            ;;
        Linux)
            if [ -f "/etc/arch-release" ]; then
                print_step "Arch Linux detected"
                sudo pacman -Sy --needed $PACKAGES || print_error "Failed to install packages via pacman"
            elif [ -d "/etc/apt" ]; then
                print_step "Debian-based Linux detected"
                sudo apt update && sudo apt install -y $PACKAGES || print_error "Failed to install packages via apt"
            else
                print_error "Unsupported Linux distribution"
            fi
            ;;
        *)
            print_error "Unsupported operating system: $OS"
            ;;
    esac
    print_success "Packages installed successfully"
}

# Backup existing configuration
backup_config() {
    if [ -d "$TMUX_CONFIG_DIR" ]; then
        print_step "Backing up existing configuration..."
        cp -r "$TMUX_CONFIG_DIR" "$BACKUP_DIR" || print_error "Failed to backup configuration"
        rm -rf "$TMUX_CONFIG_DIR"
        print_success "Backup created at $BACKUP_DIR"
    fi
}

# Install TPM and create symlinks
setup_tmux() {
    print_step "Setting up Tmux configuration..."
    git -C "$SCRIPT_DIR" submodule init && git -C "$SCRIPT_DIR" submodule update || print_error "Failed to initialize submodules"
    ln -sf "$SCRIPT_DIR" "$TMUX_CONFIG_DIR" || print_error "Failed to create symlink"
    print_success "Tmux configuration installed"
}

main() {
    check_dependencies
    setup_directories
    install_packages
    backup_config
    setup_tmux

    echo -e "\n${GREEN}${BOLD}âœ¨ Installation Complete!${NC}"
    echo -e "${BOLD}ðŸš€ Next steps:${NC}"
    echo -e "   1. Start tmux with ${BOLD}tmux${NC}"
    echo -e "   2. Install plugins with ${BOLD}prefix + I${NC}"
    echo -e "   3. Previous config backed up at ${BOLD}$BACKUP_DIR${NC} (if existed)"
}

main
